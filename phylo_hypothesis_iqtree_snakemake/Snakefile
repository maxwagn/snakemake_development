
#snakemake -p --profile qsub_hs_test --keep-going --immediate-submit --use-conda

CONSTRAINED = ["constr1","constr2","constr3","constr4"]

rule all:
    input:
        "results/hypothesis_tests_1000bs/deltaGLS_anabantoid.tsv"
        #"results/hypothesis_tests/anabantoid_phylo_tests.sitelh"
        #expand("results/concat_trees/{constr}/concat_{constr}.treefile", constr = CONSTRAINED)

rule calculate_constrained_trees:
    input:
        aln = "results/concat.best_model.nex", # obtained from phylociraptor run
        constree = "constrained_trees/anabantoid.{constr}"
    output:
        "results/concat_trees/{constr}/concat_{constr}.treefile"
    threads: 8
    conda: "iqtree.yml"
    resources:
        walltime=48,
        mem_gb=80
    params:
        wd = os.getcwd(),
        prefix = "results/concat_trees/{constr}/concat_{constr}",
        bootst = 1000
    shell:
        """
        iqtree -p {params.wd}/{input.aln} -g {params.wd}/{input.constree} --prefix {params.wd}/{params.prefix} -bb {params.bootst} -nt AUTO -ntmax {threads} -redo
        """

rule calculate_tree_stats:
    input:
        algn = "results/concat.best_model.nex",
        unconstr = "results/concat_trees/concat_unconstrained.treefile",
        constrstrees = expand("results/concat_trees/{constr}/concat_{constr}.treefile", constr = CONSTRAINED)
    output:
        test_report = "results/hypothesis_tests/anabantoid_phylo_tests.iqtree",
        site_lh = "results/hypothesis_tests/anabantoid_phylo_tests.sitelh"
    conda: "iqtree.yml"
    threads: 16
    resources:
        walltime=48,
        mem_gb=250
    params:
        wd = os.getcwd(),
        prefix = "results/hypothesis_tests/anabantoid_phylo_tests",
        zb = 10000
    shell:
        """
        cat {input.unconstr} {input.constrstrees} > results/trees_to_test.treels
        iqtree -p {params.wd}/{input.algn} -nt AUTO -ntmax {threads} -z {params.wd}/results/trees_to_test.treels -n 0 -zb {params.zb} -zw -au -wsl --prefix {params.wd}/{params.prefix} -redo
        """


rule extract_deltaGLS:
    input:
        BUSCO_table = "results/BUSCO_Partitions_anabantoid_concat.tsv",
        siteLHs = "results/hypothesis_tests_1000bs/anabantoid_phylo_tests.sitelh"
    output:
        "results/hypothesis_tests_1000bs/deltaGLS_anabantoid.tsv"
    run:
        ### get BUSCO sets into dictionary

        BUSCO_sets = dict()
        with open(str(input.BUSCO_table), "r") as iqtree:
            for line in iqtree:
                if line.startswith("Subset"):
                    pass
                else:
                    line = line.rstrip().split("\t")
                    BUSCO_sets[str(line[10])]=[int(line[8]),int(line[9])]

        #print(BUSCO_sets)

        ### calculate deltaGLS
        header = "BUSCO\tlogLTree1\tlogLTree2\tlogLTree3\tlogLTree4\tlogLTree5\tdeltaLTree1\tdeltaLTree2\tdeltaLTree3\tdeltaLTree4\tdeltaLTree4\n"


        with open(str(output), "w") as outfile:
            outfile.write(header)
            for k, v in BUSCO_sets.items():
                GLSvals = []
                deltaGLSvals = []
                with open(str(input.siteLHs), "r") as siteLHfh:
                    for line in siteLHfh:
                        if line.startswith("5"):
                            pass
                        else:
                            line = line.split()
                            #print([i for i in value_list[v[0]-1:v[1]]])
                            GLS = sum([float(i) for i in line[1:]][v[0]-1:v[1]])
                            GLSvals.append(GLS)

                for i in GLSvals:
                    deltaGLSvals.append(GLSvals[0]-i)

                outfile.write(k + "\t" + "\t".join(str(i) for i in GLSvals) + "\t" + "\t".join(str(i) for i in deltaGLSvals) + "\n")


